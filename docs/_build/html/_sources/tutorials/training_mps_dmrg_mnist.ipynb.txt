{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Training MPS with DMRG - MNIST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "from functools import partial\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torchvision import transforms, datasets\n",
    "\n",
    "import tensorkrowch as tk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MPS_DMRG(tk.MPSLayer):\n",
    "    \n",
    "    def __init__(self,\n",
    "                 n_sites,\n",
    "                 d_phys,\n",
    "                 n_labels,\n",
    "                 d_bond,\n",
    "                 block_length=2,\n",
    "                 max_bond=10):\n",
    "        super().__init__(n_sites=n_sites,\n",
    "                         d_phys=d_phys,\n",
    "                         n_labels=n_labels,\n",
    "                         d_bond=d_bond,\n",
    "                         l_position=0)\n",
    "        \n",
    "        if block_length > self.n_sites:\n",
    "            raise ValueError('Cannot create a block with more nodes than'\n",
    "                             'existing nodes in the MPS')\n",
    "            \n",
    "        if self.n_sites < 3:\n",
    "            raise ValueError('``n_sites`` should be greater than 3, to have '\n",
    "                             'both left and right nodes, besides the output '\n",
    "                             'node')\n",
    "        \n",
    "        # Set data nodes before starting training to avoid\n",
    "        # problems of edge names when creating the training block\n",
    "        self.set_data_nodes()\n",
    "            \n",
    "        self.block_position = 0\n",
    "        self.block_length = block_length\n",
    "        self.max_bond = max_bond\n",
    "        \n",
    "        # Set input edge names that are easier to use,\n",
    "        # and de-parameterize nodes\n",
    "        for i in range(len(self.right_env)):\n",
    "            self.right_env.append(self.right_env.pop(0).parameterize(False))\n",
    "                \n",
    "        self.right_node = self.right_node.parameterize(False)\n",
    "        \n",
    "        # Create block that is to be trained\n",
    "        block = self.output_node\n",
    "        for i in range(block_length):\n",
    "            if self.right_env:\n",
    "                block = tk.contract_between_(block, self.right_env.pop(0))\n",
    "            else:\n",
    "                block = tk.contract_between_(block, self.right_node)\n",
    "                self.right_node = None\n",
    "            block.get_axis('input').name = f'input_({i})'\n",
    "            \n",
    "        self.training_block = block.parameterize(True)\n",
    "        self.training_block.name = 'training_block'\n",
    "        \n",
    "        # Reset MPS attributes to the corresponding roles in MPS_DMRG\n",
    "        self.output_node = self.training_block\n",
    "        self._l_position = self.block_position\n",
    "        self.lr_env_data = self.lr_env_data[self.block_length:]\n",
    "        self._d_bond = self._d_bond[self.block_length:]\n",
    "        \n",
    "    def move_block(self, side):\n",
    "        \"\"\"\n",
    "        Moves training block one site to either left or right, when possible.\n",
    "        \"\"\"\n",
    "        self.reset()\n",
    "        \n",
    "        if side == 'right':\n",
    "            if self.block_position + self.block_length == self.n_sites:\n",
    "                raise ValueError('Cannot move block to the right, block is'\n",
    "                                    ' the right-most node')\n",
    "                \n",
    "            node1_axes = (['left'] if self.left_node else []) + \\\n",
    "                         ['input_(0)']\n",
    "            node2_axes = [f'input_({i})' for i in range(1, self.block_length)] + \\\n",
    "                         ['output'] + \\\n",
    "                         (['right'] if self.right_node else [])\n",
    "            \n",
    "            node, block = tk.split_(self.training_block,\n",
    "                                    node1_axes,\n",
    "                                    node2_axes,\n",
    "                                    rank=self.max_bond)\n",
    "            \n",
    "            if self.right_env:\n",
    "                block = tk.contract_between_(block, self.right_env.pop(0))\n",
    "            else:\n",
    "                block = tk.contract_between_(block, self.right_node)\n",
    "                self.right_node = None\n",
    "                \n",
    "            node.get_axis('splitted').name = 'right'\n",
    "            node.get_axis('input_(0)').name = 'input'\n",
    "            \n",
    "            block.get_axis('splitted').name = 'left'\n",
    "            block.name = 'training_block'\n",
    "            \n",
    "            for i in range(self.block_length - 1):\n",
    "                block.get_axis(f'input_({i + 1})').name = f'input_({i})'\n",
    "            block.get_axis('input').name = f'input_({self.block_length - 1})'\n",
    "                \n",
    "            self.training_block = block.parameterize(True)\n",
    "                \n",
    "            if self.left_node:\n",
    "                node.name = f'left_env_node_({len(self.left_env)})'\n",
    "                self.left_env.append(node)\n",
    "                \n",
    "                self.lr_env_data = self.lr_env_data[:(self.block_position - 1)] + \\\n",
    "                    [node.neighbours('input')] + \\\n",
    "                    self.lr_env_data[self.block_position:]\n",
    "            else:\n",
    "                node.name = 'left_node'\n",
    "                self.left_node = node\n",
    "                self.lr_env_data = self.lr_env_data[1:]\n",
    "                \n",
    "            self._d_bond[self.block_position] = node['right'].size()\n",
    "                \n",
    "            self.block_position += 1\n",
    "            self._l_position += 1\n",
    "            \n",
    "        elif side == 'left':\n",
    "            if self.block_position == 0:\n",
    "                raise ValueError('Cannot move block to the left, block is'\n",
    "                                 ' the left-most node')\n",
    "                \n",
    "            node1_axes = (['left'] if self.left_node else []) + \\\n",
    "                         ['output'] + \\\n",
    "                         [f'input_({i})' for i in range(self.block_length - 1)]\n",
    "            node2_axes = [f'input_({self.block_length - 1})'] + \\\n",
    "                         (['right'] if self.right_node else [])\n",
    "            \n",
    "            block, node = tk.split_(self.training_block,\n",
    "                                    node1_axes,\n",
    "                                    node2_axes,\n",
    "                                    rank=self.max_bond)\n",
    "            \n",
    "            if self.left_env:\n",
    "                block = tk.contract_between_(self.left_env.pop(-1), block)\n",
    "            else:\n",
    "                block = tk.contract_between_(self.left_node, block)\n",
    "                self.left_node = None\n",
    "                \n",
    "            block.get_axis('splitted').name = 'right'\n",
    "            block.name = 'training_block'\n",
    "            \n",
    "            node.get_axis('splitted').name = 'left'\n",
    "            node.get_axis(f'input_({self.block_length - 1})').name = 'input'\n",
    "            \n",
    "            for i in range(self.block_length - 2, -1, -1):\n",
    "                block.get_axis(f'input_({i})').name = f'input_({i + 1})'\n",
    "            block.get_axis('input').name = f'input_(0)'\n",
    "                \n",
    "            self.training_block = block.parameterize(True)\n",
    "                \n",
    "            if self.right_node:\n",
    "                for i in range(len(self.right_env) - 1, -1, -1):\n",
    "                    self.right_env[i].name = f'right_env_node_({i + 1})'\n",
    "                node.name = 'right_env_node_(0)'\n",
    "                self.right_env = [node] + self.right_env\n",
    "                \n",
    "                self.lr_env_data = self.lr_env_data[:max(\n",
    "                                        0, (self.block_position - 2))] + \\\n",
    "                    [node.neighbours('input')] + \\\n",
    "                    self.lr_env_data[(self.block_position - 1):]\n",
    "            else:\n",
    "                node.name = 'right_node'\n",
    "                self.right_node = node\n",
    "                self.lr_env_data = self.lr_env_data[:- 1]\n",
    "                \n",
    "            self._d_bond[self.block_position - 1] = node['left'].size()\n",
    "            \n",
    "            self.block_position -= 1\n",
    "            self._l_position -= 1\n",
    "            \n",
    "        else:\n",
    "            raise ValueError('`side` can only be \"left\" or \"right\"')\n",
    "        \n",
    "        self.output_node = self.training_block\n",
    "        \n",
    "    def contract(self):\n",
    "        result = super().contract()\n",
    "        for i in range(self.block_length):\n",
    "            data = result.neighbours(f'input_({i})')\n",
    "            result = result @ data\n",
    "        return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Miscellaneous initialization\n",
    "torch.manual_seed(0)\n",
    "\n",
    "# Training parameters\n",
    "num_train = 6000\n",
    "num_test = 1000\n",
    "batch_size = 500\n",
    "image_size = (28, 28)\n",
    "num_epochs = 1\n",
    "num_epochs_canonical = 3\n",
    "learn_rate = 1e-4\n",
    "l2_reg = 0.0\n",
    "d_phys = 3\n",
    "d_bond = 10\n",
    "block_length = 2\n",
    "max_bond = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "mps = MPS_DMRG(n_sites=image_size[0] * image_size[1] + 1,\n",
    "               d_phys=d_phys,\n",
    "               n_labels=10,\n",
    "               d_bond=d_bond,\n",
    "               block_length=block_length,\n",
    "               max_bond=max_bond)\n",
    "\n",
    "for node in mps.leaf_nodes.values():\n",
    "    node.tensor = node.tensor.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Before starting training, set memory modes to True, and trace\n",
    "mps.automemory = True\n",
    "mps.unbind_mode = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set our loss function\n",
    "loss_fun = torch.nn.CrossEntropyLoss()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def embedding(image: torch.Tensor) -> torch.Tensor:\n",
    "    return torch.stack([torch.ones_like(image), image, 1 - image], dim=1)\n",
    "\n",
    "transform = transforms.Compose([transforms.Resize(image_size),\n",
    "                                transforms.ToTensor(),\n",
    "                                transforms.Lambda(embedding)])  # partial(tk.add_ones, dim=1)\n",
    "\n",
    "train_set = datasets.MNIST('./data', download=True, transform=transform)\n",
    "test_set = datasets.MNIST('./data', download=True, transform=transform,\n",
    "                          train=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training on 6000 MNIST images \n",
      "(testing on 1000) for 1 epochs\n",
      "Using Adam w/ learning rate = 1.0e-04\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Put MNIST data into dataloaders\n",
    "samplers = {\n",
    "    \"train\": torch.utils.data.SubsetRandomSampler(range(num_train)),\n",
    "    \"test\": torch.utils.data.SubsetRandomSampler(range(num_test)),\n",
    "}\n",
    "loaders = {\n",
    "    name: torch.utils.data.DataLoader(\n",
    "        dataset, batch_size=batch_size, sampler=samplers[name], drop_last=True\n",
    "    )\n",
    "    for (name, dataset) in [(\"train\", train_set), (\"test\", test_set)]\n",
    "}\n",
    "num_batches = {\n",
    "    name: total_num // batch_size\n",
    "    for (name, total_num) in [(\"train\", num_train), (\"test\", num_test)]\n",
    "}\n",
    "\n",
    "print(\n",
    "    f\"Training on {num_train} MNIST images \\n\"\n",
    "    f\"(testing on {num_test}) for {num_epochs} epochs\"\n",
    ")\n",
    "print(f\"Using Adam w/ learning rate = {learn_rate:.1e}\")\n",
    "if l2_reg > 0:\n",
    "    print(f\" * L2 regularization = {l2_reg:.2e}\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "* Epoch 1, Move 0/782: Train. Loss: 2.3026, Train. Acc.: 0.0980, Test Acc.: 0.1260\n",
      "* Epoch 1, Move 100/782: Train. Loss: 2.2955, Train. Acc.: 0.1118, Test Acc.: 0.1260\n",
      "* Epoch 1, Move 200/782: Train. Loss: 2.1719, Train. Acc.: 0.1935, Test Acc.: 0.2140\n",
      "* Epoch 1, Move 300/782: Train. Loss: 1.8773, Train. Acc.: 0.4018, Test Acc.: 0.3980\n",
      "* Epoch 1, Move 400/782: Train. Loss: 1.5773, Train. Acc.: 0.5215, Test Acc.: 0.5070\n",
      "* Epoch 1, Move 500/782: Train. Loss: 1.1831, Train. Acc.: 0.6588, Test Acc.: 0.6180\n",
      "* Epoch 1, Move 600/782: Train. Loss: 0.8912, Train. Acc.: 0.7337, Test Acc.: 0.6800\n",
      "* Epoch 1, Move 700/782: Train. Loss: 0.7866, Train. Acc.: 0.7597, Test Acc.: 0.7040\n",
      "* Epoch 1, Move 800/782: Train. Loss: 0.8792, Train. Acc.: 0.7195, Test Acc.: 0.7350\n",
      "* Epoch 1, Move 900/782: Train. Loss: 992.5513, Train. Acc.: 0.6710, Test Acc.: 0.7180\n",
      "* Epoch 1, Move 1000/782: Train. Loss: 7786.3799, Train. Acc.: 0.7400, Test Acc.: 0.7050\n",
      "* Epoch 1, Move 1100/782: Train. Loss: 45351.9336, Train. Acc.: 0.7002, Test Acc.: 0.7130\n",
      "* Epoch 1, Move 1200/782: Train. Loss: 87926.8281, Train. Acc.: 0.7025, Test Acc.: 0.7280\n",
      "* Epoch 1, Move 1300/782: Train. Loss: 94097.4688, Train. Acc.: 0.7275, Test Acc.: 0.6800\n",
      "* Epoch 1, Move 1400/782: Train. Loss: 300232.4688, Train. Acc.: 0.6085, Test Acc.: 0.5630\n",
      "* Epoch 1, Move 1500/782: Train. Loss: 270656.3438, Train. Acc.: 0.6110, Test Acc.: 0.6100\n"
     ]
    }
   ],
   "source": [
    "n_moves = image_size[0] * image_size[1] - block_length\n",
    "\n",
    "mps.trace(torch.zeros(image_size[0] * image_size[1], 1, d_phys).to(device))\n",
    "optimizer = torch.optim.Adam(mps.parameters(),\n",
    "                             lr=learn_rate,\n",
    "                             weight_decay=l2_reg)\n",
    "\n",
    "for epoch_num in range(1, num_epochs + 1):\n",
    "    \n",
    "    for move in range(2 * n_moves):\n",
    "        running_train_loss = 0.0\n",
    "        running_train_acc = 0.0\n",
    "    \n",
    "        for inputs, labels in loaders[\"train\"]:\n",
    "            inputs = inputs.view(\n",
    "                [batch_size, d_phys, image_size[0] * image_size[1]]).permute(2, 0, 1)\n",
    "            labels = labels.data\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "            scores = mps(inputs)\n",
    "            _, preds = torch.max(scores, 1)\n",
    "\n",
    "            # Compute the loss and accuracy, add them to the running totals\n",
    "            loss = loss_fun(scores, labels)\n",
    "\n",
    "            with torch.no_grad():\n",
    "                accuracy = torch.sum(preds == labels).item() / batch_size\n",
    "                running_train_loss += loss\n",
    "                running_train_acc += accuracy\n",
    "\n",
    "            # Backpropagate and update parameters\n",
    "            optimizer.zero_grad()\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            running_test_acc = 0.0\n",
    "\n",
    "            for inputs, labels in loaders[\"test\"]:\n",
    "                inputs = inputs.view([\n",
    "                    batch_size, d_phys, image_size[0] * image_size[1]]).permute(2, 0, 1)\n",
    "                labels = labels.data\n",
    "                inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "                # Call our MPS to get logit scores and predictions\n",
    "                scores = mps(inputs)\n",
    "                _, preds = torch.max(scores, 1)\n",
    "                running_test_acc += torch.sum(preds == labels).item() / batch_size\n",
    "        \n",
    "        if move % 100 == 0:\n",
    "            print(f'* Epoch {epoch_num}, Move {move}/{n_moves}: '\n",
    "                f'Train. Loss: {running_train_loss / num_batches[\"train\"]:.4f}, '\n",
    "                f'Train. Acc.: {running_train_acc / num_batches[\"train\"]:.4f}, '\n",
    "                f'Test Acc.: {running_test_acc / num_batches[\"test\"]:.4f}')\n",
    "        \n",
    "        if move < n_moves:\n",
    "            mps.move_block('right')\n",
    "        else:\n",
    "            mps.move_block('left')\n",
    "            \n",
    "        mps.trace(torch.zeros(image_size[0] * image_size[1], 1, d_phys).to(device))\n",
    "        optimizer = torch.optim.Adam(mps.parameters(),\n",
    "                                     lr=learn_rate,\n",
    "                                     weight_decay=l2_reg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nº params:     900\n",
      "Memory module: 0.0034 MB\n"
     ]
    }
   ],
   "source": [
    "# Original number of parametrs\n",
    "n_params = 0\n",
    "memory = 0\n",
    "for p in mps.parameters():\n",
    "    n_params += p.nelement()\n",
    "    memory += p.nelement() * p.element_size()  # Bytes\n",
    "print(f'Nº params:     {n_params}')\n",
    "print(f'Memory module: {memory / 1024**2:.4f} MB')  # MegaBytes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pytorch",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "98819ef66e0fd8e26166ef23b2736d781c80dc7aa950207c762e497c21afbd1c"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
