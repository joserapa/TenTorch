{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MPS - MNIST Binarized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import math\n",
    "from functools import partial\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torchvision import transforms, datasets\n",
    "\n",
    "import tensorkrowch as tk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Miscellaneous initialization\n",
    "torch.manual_seed(0)\n",
    "\n",
    "# Training parameters\n",
    "num_train = 60000\n",
    "num_test = 10000\n",
    "batch_size = 500\n",
    "image_size = (28, 28)\n",
    "num_epochs = 10\n",
    "num_epochs_canonical = 3\n",
    "learn_rate = 1e-4\n",
    "l2_reg = 0.0\n",
    "d_phys = 2\n",
    "d_bond = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "mps = tk.MPSLayer(n_sites=image_size[0] * image_size[1] + 1,\n",
    "                  d_phys=d_phys,\n",
    "                  n_labels=10,\n",
    "                  d_bond=d_bond)\n",
    "mps = mps.to(device)\n",
    "\n",
    "# for node in mps.leaf_nodes.values():\n",
    "#     node.tensor = math.sqrt(2) * node.tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Before starting training, set memory modes to True, and trace\n",
    "mps.automemory = True\n",
    "mps.auto_unbind = False\n",
    "mps.trace(torch.zeros(image_size[0] * image_size[1], 1, d_phys).to(device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set our loss function and optimizer\n",
    "loss_fun = torch.nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.Adam(mps.parameters(),\n",
    "                             lr=learn_rate,\n",
    "                             weight_decay=l2_reg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "def embedding(image: torch.Tensor) -> torch.Tensor:\n",
    "    # return (1 / math.sqrt(2)) * torch.stack(\n",
    "    #     [torch.ones_like(image), image], dim=1)\n",
    "    return torch.stack([torch.ones_like(image), image], dim=1)\n",
    "\n",
    "transform = transforms.Compose([transforms.Resize(image_size),\n",
    "                                transforms.ToTensor(),\n",
    "                                transforms.Normalize((0.1307,), (0.3081,)),\n",
    "                                transforms.Lambda(lambda x: 2 * (x > 0).float() - 1),\n",
    "                                transforms.Lambda(embedding)])\n",
    "\n",
    "train_set = datasets.MNIST('./data', download=True, transform=transform)\n",
    "test_set = datasets.MNIST('./data', download=True, transform=transform,\n",
    "                          train=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training on 60000 MNIST images \n",
      "(testing on 10000) for 10 epochs\n",
      "Using Adam w/ learning rate = 1.0e-04\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Put MNIST data into dataloaders\n",
    "samplers = {\n",
    "    \"train\": torch.utils.data.SubsetRandomSampler(range(num_train)),\n",
    "    \"test\": torch.utils.data.SubsetRandomSampler(range(num_test)),\n",
    "}\n",
    "loaders = {\n",
    "    name: torch.utils.data.DataLoader(\n",
    "        dataset, batch_size=batch_size, sampler=samplers[name], drop_last=True\n",
    "    )\n",
    "    for (name, dataset) in [(\"train\", train_set), (\"test\", test_set)]\n",
    "}\n",
    "num_batches = {\n",
    "    name: total_num // batch_size\n",
    "    for (name, total_num) in [(\"train\", num_train), (\"test\", num_test)]\n",
    "}\n",
    "\n",
    "print(\n",
    "    f\"Training on {num_train} MNIST images \\n\"\n",
    "    f\"(testing on {num_test}) for {num_epochs} epochs\"\n",
    ")\n",
    "print(f\"Using Adam w/ learning rate = {learn_rate:.1e}\")\n",
    "if l2_reg > 0:\n",
    "    print(f\" * L2 regularization = {l2_reg:.2e}\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "* Epoch 1: Train. Loss: 0.9356, Train. Acc.: 0.6729, Test Acc.: 0.9050\n",
      "* Epoch 2: Train. Loss: 0.2356, Train. Acc.: 0.9273, Test Acc.: 0.9510\n",
      "* Epoch 3: Train. Loss: 0.1526, Train. Acc.: 0.9532, Test Acc.: 0.9625\n",
      "* Epoch 4: Train. Loss: 0.1149, Train. Acc.: 0.9644, Test Acc.: 0.9655\n",
      "* Epoch 5: Train. Loss: 0.0938, Train. Acc.: 0.9706, Test Acc.: 0.9700\n",
      "* Epoch 6: Train. Loss: 0.0786, Train. Acc.: 0.9762, Test Acc.: 0.9724\n",
      "* Epoch 7: Train. Loss: 0.0693, Train. Acc.: 0.9781, Test Acc.: 0.9733\n",
      "* Epoch 8: Train. Loss: 0.0609, Train. Acc.: 0.9803, Test Acc.: 0.9758\n",
      "* Epoch 9: Train. Loss: 0.0544, Train. Acc.: 0.9822, Test Acc.: 0.9752\n",
      "* Epoch 10: Train. Loss: 0.0505, Train. Acc.: 0.9839, Test Acc.: 0.9769\n"
     ]
    }
   ],
   "source": [
    "for epoch_num in range(1, num_epochs + 1):\n",
    "    running_train_loss = 0.0\n",
    "    running_train_acc = 0.0\n",
    "    \n",
    "    for inputs, labels in loaders[\"train\"]:\n",
    "        inputs = inputs.view(\n",
    "            [batch_size, d_phys, image_size[0] * image_size[1]]).permute(2, 0, 1)\n",
    "        labels = labels.data\n",
    "        inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "        scores = mps(inputs)\n",
    "        _, preds = torch.max(scores, 1)\n",
    "\n",
    "        # Compute the loss and accuracy, add them to the running totals\n",
    "        loss = loss_fun(scores, labels)\n",
    "\n",
    "        with torch.no_grad():\n",
    "            accuracy = torch.sum(preds == labels).item() / batch_size\n",
    "            running_train_loss += loss\n",
    "            running_train_acc += accuracy\n",
    "\n",
    "        # Backpropagate and update parameters\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        running_test_acc = 0.0\n",
    "\n",
    "        for inputs, labels in loaders[\"test\"]:\n",
    "            inputs = inputs.view([\n",
    "                batch_size, d_phys, image_size[0] * image_size[1]]).permute(2, 0, 1)\n",
    "            labels = labels.data\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "            # Call our MPS to get logit scores and predictions\n",
    "            scores = mps(inputs)\n",
    "            _, preds = torch.max(scores, 1)\n",
    "            running_test_acc += torch.sum(preds == labels).item() / batch_size\n",
    "    \n",
    "    print(f'* Epoch {epoch_num}: '\n",
    "          f'Train. Loss: {running_train_loss / num_batches[\"train\"]:.4f}, '\n",
    "          f'Train. Acc.: {running_train_acc / num_batches[\"train\"]:.4f}, '\n",
    "          f'Test Acc.: {running_test_acc / num_batches[\"test\"]:.4f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nº params:     157440\n",
      "Memory module: 0.6006 MB\n"
     ]
    }
   ],
   "source": [
    "# Original number of parametrs\n",
    "n_params = 0\n",
    "memory = 0\n",
    "for p in mps.parameters():\n",
    "    n_params += p.nelement()\n",
    "    memory += p.nelement() * p.element_size()  # Bytes\n",
    "print(f'Nº params:     {n_params}')\n",
    "print(f'Memory module: {memory / 1024**2:.4f} MB')  # MegaBytes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save model\n",
    "\n",
    "mps.canonicalize(cum_percentage=0.98)\n",
    "\n",
    "save_dict = {'state_dict': mps.state_dict(),\n",
    "             'd_bond': mps.d_bond}\n",
    "torch.save(save_dict, 'mps.pt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load model\n",
    "\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "load_dict = torch.load('mps.pt')\n",
    "\n",
    "mps_lst = []\n",
    "for _ in range(2):\n",
    "    mps = tk.MPSLayer(n_sites=image_size[0] * image_size[1] + 1,\n",
    "                      d_phys=d_phys,\n",
    "                      n_labels=10,\n",
    "                      d_bond=load_dict['d_bond'])\n",
    "    mps = mps.to(device)\n",
    "    mps.load_state_dict(load_dict['state_dict'])\n",
    "    \n",
    "    mps_lst.append(mps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "generated_class = 1\n",
    "\n",
    "v_class_tensor = torch.zeros(10).to(device)\n",
    "v_class_tensor[generated_class] = 1.\n",
    "\n",
    "v1_class = tk.Node(name='v1_class',\n",
    "                   axes_names=('class',),\n",
    "                   tensor=v_class_tensor)\n",
    "v2_class = tk.Node(name='v2_class',\n",
    "                   axes_names=('class',),\n",
    "                   tensor=v_class_tensor)\n",
    "\n",
    "pixel_tensor = torch.tensor([1., 1.]).to(device)\n",
    "v1 = tk.Node(name='v1',\n",
    "             axes_names=('feature',),\n",
    "             tensor=pixel_tensor)\n",
    "v2 = tk.Node(name='v2',\n",
    "             axes_names=('feature',),\n",
    "             tensor=pixel_tensor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor(21.9669, device='cuda:0', grad_fn=<CopyBackwards>)\n"
     ]
    }
   ],
   "source": [
    "# Compute norm\n",
    "mps_lst[0].output_node['output'] ^ v1_class['class']\n",
    "mps_lst[1].output_node['output'] ^ v2_class['class']\n",
    "\n",
    "result = mps_lst[0].output_node @ v1_class\n",
    "\n",
    "norm = result.tensor.norm()\n",
    "print(norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "nodes_mps_lst = [([mps_lst[i].left_node] + \\\n",
    "                   mps_lst[i].left_env + \\\n",
    "                  [mps_lst[i].output_node] + \\\n",
    "                   mps_lst[i].right_env + \\\n",
    "                  [mps_lst[i].right_node]) for i in range(2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i, (node1, node2) in enumerate(zip(*nodes_mps_lst)):\n",
    "    if 'output' in node1.name:\n",
    "        continue\n",
    "    else:\n",
    "        if i == 0:\n",
    "            node1['input'] ^ v1['feature']\n",
    "            node2['input'] ^ v2['feature']\n",
    "        else:\n",
    "            node1['input'] ^ node2['input']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Probability of pixel 0: 0.9970\n",
      "Probability of pixel 1: 0.9937\n",
      "Probability of pixel 2: 0.9903\n",
      "Probability of pixel 3: 0.9868\n",
      "Probability of pixel 4: 0.9832\n",
      "Probability of pixel 5: 0.9796\n",
      "Probability of pixel 6: 0.9759\n",
      "Probability of pixel 7: 0.9722\n",
      "Probability of pixel 8: 0.9683\n",
      "Probability of pixel 9: 0.9644\n",
      "Probability of pixel 10: 0.9604\n",
      "Probability of pixel 11: 0.9564\n",
      "Probability of pixel 12: 0.9523\n",
      "Probability of pixel 13: 0.9481\n",
      "Probability of pixel 14: 0.9438\n",
      "Probability of pixel 15: 0.9394\n",
      "Probability of pixel 16: 0.9350\n",
      "Probability of pixel 17: 0.9305\n",
      "Probability of pixel 18: 0.9258\n",
      "Probability of pixel 19: 0.9211\n",
      "Probability of pixel 20: 0.9163\n",
      "Probability of pixel 21: 0.9115\n",
      "Probability of pixel 22: 0.9162\n",
      "Probability of pixel 23: 0.9111\n",
      "Probability of pixel 24: 0.9059\n",
      "Probability of pixel 25: 0.9007\n",
      "Probability of pixel 26: 0.8953\n",
      "Probability of pixel 27: 0.8899\n",
      "Probability of pixel 28: 0.8844\n",
      "Probability of pixel 29: 0.8787\n",
      "Probability of pixel 30: 0.8730\n",
      "Probability of pixel 31: 0.8673\n",
      "Probability of pixel 32: 0.8614\n",
      "Probability of pixel 33: 0.8671\n",
      "Probability of pixel 34: 0.8731\n",
      "Probability of pixel 35: 0.8791\n",
      "Probability of pixel 36: 0.8727\n",
      "Probability of pixel 37: 0.8663\n",
      "Probability of pixel 38: 0.8601\n",
      "Probability of pixel 39: 0.8538\n",
      "Probability of pixel 40: 0.8477\n",
      "Probability of pixel 41: 0.8416\n",
      "Probability of pixel 42: 0.8353\n",
      "Probability of pixel 43: 0.8289\n",
      "Probability of pixel 44: 0.8224\n",
      "Probability of pixel 45: 0.8156\n",
      "Probability of pixel 46: 0.8088\n",
      "Probability of pixel 47: 0.8018\n",
      "Probability of pixel 48: 0.7946\n",
      "Probability of pixel 49: 0.7872\n",
      "Probability of pixel 50: 0.7795\n",
      "Probability of pixel 51: 0.7717\n",
      "Probability of pixel 52: 0.7792\n",
      "Probability of pixel 53: 0.7871\n",
      "Probability of pixel 54: 0.7952\n",
      "Probability of pixel 55: 0.8035\n",
      "Probability of pixel 56: 0.7946\n",
      "Probability of pixel 57: 0.7856\n",
      "Probability of pixel 58: 0.7765\n",
      "Probability of pixel 59: 0.7674\n",
      "Probability of pixel 60: 0.7583\n",
      "Probability of pixel 61: 0.7492\n",
      "Probability of pixel 62: 0.7404\n",
      "Probability of pixel 63: 0.7325\n",
      "Probability of pixel 64: 0.7251\n",
      "Probability of pixel 65: 0.7323\n",
      "Probability of pixel 66: 0.7262\n",
      "Probability of pixel 67: 0.7343\n",
      "Probability of pixel 68: 0.7313\n",
      "Probability of pixel 69: 0.7346\n",
      "Probability of pixel 70: 0.7307\n",
      "Probability of pixel 71: 0.7299\n",
      "Probability of pixel 72: 0.7288\n",
      "Probability of pixel 73: 0.7273\n",
      "Probability of pixel 74: 0.7217\n",
      "Probability of pixel 75: 0.7265\n",
      "Probability of pixel 76: 0.7178\n",
      "Probability of pixel 77: 0.7105\n",
      "Probability of pixel 78: 0.7022\n",
      "Probability of pixel 79: 0.7082\n",
      "Probability of pixel 80: 0.7175\n",
      "Probability of pixel 81: 0.7052\n",
      "Probability of pixel 82: 0.6928\n",
      "Probability of pixel 83: 0.6804\n",
      "Probability of pixel 84: 0.6924\n",
      "Probability of pixel 85: 0.7047\n",
      "Probability of pixel 86: 0.6916\n",
      "Probability of pixel 87: 0.6784\n",
      "Probability of pixel 88: 0.6640\n",
      "Probability of pixel 89: 0.6798\n",
      "Probability of pixel 90: 0.6683\n",
      "Probability of pixel 91: 0.6578\n",
      "Probability of pixel 92: 0.6459\n",
      "Probability of pixel 93: 0.6597\n",
      "Probability of pixel 94: 0.6717\n",
      "Probability of pixel 95: 0.6627\n",
      "Probability of pixel 96: 0.6525\n",
      "Probability of pixel 97: 0.6370\n",
      "Probability of pixel 98: 0.6579\n",
      "Probability of pixel 99: 0.6574\n",
      "Probability of pixel 100: 0.6497\n",
      "Probability of pixel 101: 0.6407\n",
      "Probability of pixel 102: 0.6363\n",
      "Probability of pixel 103: 0.6237\n",
      "Probability of pixel 104: 0.6380\n",
      "Probability of pixel 105: 0.6414\n",
      "Probability of pixel 106: 0.6337\n",
      "Probability of pixel 107: 0.6239\n",
      "Probability of pixel 108: 0.6132\n",
      "Probability of pixel 109: 0.5999\n",
      "Probability of pixel 110: 0.6121\n",
      "Probability of pixel 111: 0.6277\n",
      "Probability of pixel 112: 0.6145\n",
      "Probability of pixel 113: 0.6272\n",
      "Probability of pixel 114: 0.6136\n",
      "Probability of pixel 115: 0.6270\n",
      "Probability of pixel 116: 0.6139\n",
      "Probability of pixel 117: 0.6023\n",
      "Probability of pixel 118: 0.6159\n",
      "Probability of pixel 119: 0.6088\n",
      "Probability of pixel 120: 0.6208\n",
      "Probability of pixel 121: 0.6284\n",
      "Probability of pixel 122: 0.6267\n",
      "Probability of pixel 123: 0.6282\n",
      "Probability of pixel 124: 0.6381\n",
      "Probability of pixel 125: 0.6350\n",
      "Probability of pixel 126: 0.6263\n",
      "Probability of pixel 127: 0.6381\n",
      "Probability of pixel 128: 0.6545\n",
      "Probability of pixel 129: 0.6437\n",
      "Probability of pixel 130: 0.6475\n",
      "Probability of pixel 131: 0.6485\n",
      "Probability of pixel 132: 0.6371\n",
      "Probability of pixel 133: 0.6234\n",
      "Probability of pixel 134: 0.6411\n",
      "Probability of pixel 135: 0.6431\n",
      "Probability of pixel 136: 0.6264\n",
      "Probability of pixel 137: 0.6110\n",
      "Probability of pixel 138: 0.6294\n",
      "Probability of pixel 139: 0.6168\n",
      "Probability of pixel 140: 0.6049\n",
      "Probability of pixel 141: 0.5929\n",
      "Probability of pixel 142: 0.5809\n",
      "Probability of pixel 143: 0.5905\n",
      "Probability of pixel 144: 0.6077\n",
      "Probability of pixel 145: 0.6210\n",
      "Probability of pixel 146: 0.6136\n",
      "Probability of pixel 147: 0.6271\n",
      "Probability of pixel 148: 0.6302\n",
      "Probability of pixel 149: 0.6250\n",
      "Probability of pixel 150: 0.6345\n",
      "Probability of pixel 151: 0.6247\n",
      "Probability of pixel 152: 0.6395\n",
      "Probability of pixel 153: 0.6232\n",
      "Probability of pixel 154: 0.6525\n",
      "Probability of pixel 155: 0.6612\n",
      "Probability of pixel 156: 0.6511\n",
      "Probability of pixel 157: 0.6781\n",
      "Probability of pixel 158: 0.6834\n",
      "Probability of pixel 159: 0.7015\n",
      "Probability of pixel 160: 0.7060\n",
      "Probability of pixel 161: 0.7148\n",
      "Probability of pixel 162: 0.7027\n",
      "Probability of pixel 163: 0.6866\n",
      "Probability of pixel 164: 0.6919\n",
      "Probability of pixel 165: 0.6894\n",
      "Probability of pixel 166: 0.6787\n",
      "Probability of pixel 167: 0.6686\n",
      "Probability of pixel 168: 0.6591\n",
      "Probability of pixel 169: 0.6494\n",
      "Probability of pixel 170: 0.6399\n",
      "Probability of pixel 171: 0.6293\n",
      "Probability of pixel 172: 0.6444\n",
      "Probability of pixel 173: 0.6381\n",
      "Probability of pixel 174: 0.6400\n",
      "Probability of pixel 175: 0.6417\n",
      "Probability of pixel 176: 0.6440\n",
      "Probability of pixel 177: 0.6463\n",
      "Probability of pixel 178: 0.6595\n",
      "Probability of pixel 179: 0.6640\n",
      "Probability of pixel 180: 0.6476\n",
      "Probability of pixel 181: 0.6281\n",
      "Probability of pixel 182: 0.5765\n",
      "Probability of pixel 183: 0.6197\n",
      "Probability of pixel 184: 0.5795\n",
      "Probability of pixel 185: 0.6361\n",
      "Probability of pixel 186: 0.6214\n",
      "Probability of pixel 187: 0.6610\n",
      "Probability of pixel 188: 0.6481\n",
      "Probability of pixel 189: 0.6735\n",
      "Probability of pixel 190: 0.6937\n",
      "Probability of pixel 191: 0.7115\n",
      "Probability of pixel 192: 0.7171\n",
      "Probability of pixel 193: 0.7020\n",
      "Probability of pixel 194: 0.6968\n",
      "Probability of pixel 195: 0.7011\n",
      "Probability of pixel 196: 0.6951\n",
      "Probability of pixel 197: 0.6891\n",
      "Probability of pixel 198: 0.6954\n",
      "Probability of pixel 199: 0.7002\n",
      "Probability of pixel 200: 0.7109\n",
      "Probability of pixel 201: 0.7139\n",
      "Probability of pixel 202: 0.7126\n",
      "Probability of pixel 203: 0.7240\n",
      "Probability of pixel 204: 0.7087\n",
      "Probability of pixel 205: 0.7206\n",
      "Probability of pixel 206: 0.7277\n",
      "Probability of pixel 207: 0.7104\n",
      "Probability of pixel 208: 0.7231\n",
      "Probability of pixel 209: 0.7267\n",
      "Probability of pixel 210: 0.7595\n",
      "Probability of pixel 211: 0.7106\n",
      "Probability of pixel 212: 0.6857\n",
      "Probability of pixel 213: 0.6870\n",
      "Probability of pixel 214: 0.6997\n",
      "Probability of pixel 215: 0.6927\n",
      "Probability of pixel 216: 0.6642\n",
      "Probability of pixel 217: 0.6448\n",
      "Probability of pixel 218: 0.6551\n",
      "Probability of pixel 219: 0.6657\n",
      "Probability of pixel 220: 0.6710\n",
      "Probability of pixel 221: 0.6652\n",
      "Probability of pixel 222: 0.6609\n",
      "Probability of pixel 223: 0.6541\n",
      "Probability of pixel 224: 0.6607\n",
      "Probability of pixel 225: 0.6544\n",
      "Probability of pixel 226: 0.6477\n",
      "Probability of pixel 227: 0.6547\n",
      "Probability of pixel 228: 0.6519\n",
      "Probability of pixel 229: 0.6531\n",
      "Probability of pixel 230: 0.6614\n",
      "Probability of pixel 231: 0.6425\n",
      "Probability of pixel 232: 0.6345\n",
      "Probability of pixel 233: 0.6373\n",
      "Probability of pixel 234: 0.6312\n",
      "Probability of pixel 235: 0.6254\n",
      "Probability of pixel 236: 0.6114\n",
      "Probability of pixel 237: 0.5914\n",
      "Probability of pixel 238: 0.5716\n",
      "Probability of pixel 239: 0.6020\n",
      "Probability of pixel 240: 0.6171\n",
      "Probability of pixel 241: 0.6226\n",
      "Probability of pixel 242: 0.6209\n",
      "Probability of pixel 243: 0.6312\n",
      "Probability of pixel 244: 0.6364\n",
      "Probability of pixel 245: 0.6376\n",
      "Probability of pixel 246: 0.6491\n",
      "Probability of pixel 247: 0.6281\n",
      "Probability of pixel 248: 0.6229\n",
      "Probability of pixel 249: 0.6162\n",
      "Probability of pixel 250: 0.6103\n",
      "Probability of pixel 251: 0.6028\n",
      "Probability of pixel 252: 0.6102\n",
      "Probability of pixel 253: 0.6178\n",
      "Probability of pixel 254: 0.6107\n",
      "Probability of pixel 255: 0.6185\n",
      "Probability of pixel 256: 0.6237\n",
      "Probability of pixel 257: 0.6197\n",
      "Probability of pixel 258: 0.6266\n",
      "Probability of pixel 259: 0.6226\n",
      "Probability of pixel 260: 0.6278\n",
      "Probability of pixel 261: 0.6161\n",
      "Probability of pixel 262: 0.5988\n",
      "Probability of pixel 263: 0.5966\n",
      "Probability of pixel 264: 0.5984\n",
      "Probability of pixel 265: 0.6099\n",
      "Probability of pixel 266: 0.5937\n",
      "Probability of pixel 267: 0.5937\n",
      "Probability of pixel 268: 0.6094\n",
      "Probability of pixel 269: 0.6246\n",
      "Probability of pixel 270: 0.6342\n",
      "Probability of pixel 271: 0.6388\n",
      "Probability of pixel 272: 0.5985\n",
      "Probability of pixel 273: 0.6127\n",
      "Probability of pixel 274: 0.5949\n",
      "Probability of pixel 275: 0.5976\n",
      "Probability of pixel 276: 0.5926\n",
      "Probability of pixel 277: 0.5876\n",
      "Probability of pixel 278: 0.5814\n",
      "Probability of pixel 279: 0.5875\n",
      "Probability of pixel 280: 0.5937\n",
      "Probability of pixel 281: 0.5998\n",
      "Probability of pixel 282: 0.5933\n",
      "Probability of pixel 283: 0.6009\n",
      "Probability of pixel 284: 0.6013\n",
      "Probability of pixel 285: 0.5940\n",
      "Probability of pixel 286: 0.5883\n",
      "Probability of pixel 287: 0.5765\n",
      "Probability of pixel 288: 0.5938\n",
      "Probability of pixel 289: 0.5959\n",
      "Probability of pixel 290: 0.5997\n",
      "Probability of pixel 291: 0.6122\n",
      "Probability of pixel 292: 0.6400\n",
      "Probability of pixel 293: 0.6500\n",
      "Probability of pixel 294: 0.6455\n",
      "Probability of pixel 295: 0.6382\n",
      "Probability of pixel 296: 0.6354\n",
      "Probability of pixel 297: 0.6396\n",
      "Probability of pixel 298: 0.6536\n",
      "Probability of pixel 299: 0.6401\n",
      "Probability of pixel 300: 0.6225\n",
      "Probability of pixel 301: 0.6117\n",
      "Probability of pixel 302: 0.6137\n",
      "Probability of pixel 303: 0.6109\n",
      "Probability of pixel 304: 0.6104\n",
      "Probability of pixel 305: 0.6146\n",
      "Probability of pixel 306: 0.6094\n",
      "Probability of pixel 307: 0.6051\n",
      "Probability of pixel 308: 0.6010\n",
      "Probability of pixel 309: 0.6051\n",
      "Probability of pixel 310: 0.6000\n",
      "Probability of pixel 311: 0.5949\n",
      "Probability of pixel 312: 0.5894\n",
      "Probability of pixel 313: 0.5833\n",
      "Probability of pixel 314: 0.5890\n",
      "Probability of pixel 315: 0.5861\n",
      "Probability of pixel 316: 0.5945\n",
      "Probability of pixel 317: 0.5960\n",
      "Probability of pixel 318: 0.6025\n",
      "Probability of pixel 319: 0.5864\n",
      "Probability of pixel 320: 0.5603\n",
      "Probability of pixel 321: 0.5138\n",
      "Probability of pixel 322: 0.4958\n",
      "Probability of pixel 323: 0.5216\n",
      "Probability of pixel 324: 0.5085\n",
      "Probability of pixel 325: 0.5048\n",
      "Probability of pixel 326: 0.5069\n",
      "Probability of pixel 327: 0.5173\n",
      "Probability of pixel 328: 0.5091\n",
      "Probability of pixel 329: 0.5057\n",
      "Probability of pixel 330: 0.5064\n",
      "Probability of pixel 331: 0.5100\n",
      "Probability of pixel 332: 0.5026\n",
      "Probability of pixel 333: 0.4961\n",
      "Probability of pixel 334: 0.4933\n",
      "Probability of pixel 335: 0.4963\n",
      "Probability of pixel 336: 0.4937\n",
      "Probability of pixel 337: 0.4964\n",
      "Probability of pixel 338: 0.4937\n",
      "Probability of pixel 339: 0.4907\n",
      "Probability of pixel 340: 0.4907\n",
      "Probability of pixel 341: 0.5065\n",
      "Probability of pixel 342: 0.4932\n",
      "Probability of pixel 343: 0.5055\n",
      "Probability of pixel 344: 0.5097\n",
      "Probability of pixel 345: 0.5000\n",
      "Probability of pixel 346: 0.5163\n",
      "Probability of pixel 347: 0.5006\n",
      "Probability of pixel 348: 0.4904\n",
      "Probability of pixel 349: 0.4954\n",
      "Probability of pixel 350: 0.4778\n",
      "Probability of pixel 351: 0.5036\n",
      "Probability of pixel 352: 0.5016\n",
      "Probability of pixel 353: 0.5028\n",
      "Probability of pixel 354: 0.5030\n",
      "Probability of pixel 355: 0.5064\n",
      "Probability of pixel 356: 0.4981\n",
      "Probability of pixel 357: 0.4996\n",
      "Probability of pixel 358: 0.5000\n",
      "Probability of pixel 359: 0.4840\n",
      "Probability of pixel 360: 0.4977\n",
      "Probability of pixel 361: 0.5010\n",
      "Probability of pixel 362: 0.5088\n",
      "Probability of pixel 363: 0.5120\n",
      "Probability of pixel 364: 0.5097\n",
      "Probability of pixel 365: 0.5075\n",
      "Probability of pixel 366: 0.5097\n",
      "Probability of pixel 367: 0.5116\n",
      "Probability of pixel 368: 0.5125\n",
      "Probability of pixel 369: 0.5207\n",
      "Probability of pixel 370: 0.5014\n",
      "Probability of pixel 371: 0.5002\n",
      "Probability of pixel 372: 0.5088\n",
      "Probability of pixel 373: 0.5032\n",
      "Probability of pixel 374: 0.5173\n",
      "Probability of pixel 375: 0.5114\n",
      "Probability of pixel 376: 0.5333\n",
      "Probability of pixel 377: 0.4830\n",
      "Probability of pixel 378: 0.4704\n",
      "Probability of pixel 379: 0.4856\n",
      "Probability of pixel 380: 0.4908\n",
      "Probability of pixel 381: 0.4818\n",
      "Probability of pixel 382: 0.4931\n",
      "Probability of pixel 383: 0.4895\n",
      "Probability of pixel 384: 0.4971\n",
      "Probability of pixel 385: 0.4975\n",
      "Probability of pixel 386: 0.5006\n",
      "Probability of pixel 387: 0.4888\n",
      "Probability of pixel 388: 0.4831\n",
      "Probability of pixel 389: 0.4801\n",
      "Probability of pixel 390: 0.4843\n",
      "Probability of pixel 391: 0.4875\n",
      "Probability of pixel 393: 0.4896\n",
      "Probability of pixel 394: 0.4872\n",
      "Probability of pixel 395: 0.4892\n",
      "Probability of pixel 396: 0.4903\n",
      "Probability of pixel 397: 0.4871\n",
      "Probability of pixel 398: 0.4902\n",
      "Probability of pixel 399: 0.4887\n",
      "Probability of pixel 400: 0.4865\n",
      "Probability of pixel 401: 0.4798\n",
      "Probability of pixel 402: 0.4797\n",
      "Probability of pixel 403: 0.4859\n",
      "Probability of pixel 404: 0.4862\n",
      "Probability of pixel 405: 0.4946\n",
      "Probability of pixel 406: 0.4941\n",
      "Probability of pixel 407: 0.4871\n",
      "Probability of pixel 408: 0.4817\n",
      "Probability of pixel 409: 0.4951\n",
      "Probability of pixel 410: 0.5051\n",
      "Probability of pixel 411: 0.5012\n",
      "Probability of pixel 412: 0.4803\n",
      "Probability of pixel 413: 0.4683\n",
      "Probability of pixel 414: 0.4606\n",
      "Probability of pixel 415: 0.4703\n",
      "Probability of pixel 416: 0.4714\n",
      "Probability of pixel 417: 0.4706\n",
      "Probability of pixel 418: 0.4728\n",
      "Probability of pixel 419: 0.4718\n",
      "Probability of pixel 420: 0.4729\n",
      "Probability of pixel 421: 0.4723\n",
      "Probability of pixel 422: 0.4715\n",
      "Probability of pixel 423: 0.4705\n",
      "Probability of pixel 424: 0.4693\n",
      "Probability of pixel 425: 0.4719\n",
      "Probability of pixel 426: 0.4721\n",
      "Probability of pixel 427: 0.4804\n",
      "Probability of pixel 428: 0.4932\n",
      "Probability of pixel 429: 0.4844\n",
      "Probability of pixel 430: 0.4985\n",
      "Probability of pixel 431: 0.4718\n",
      "Probability of pixel 432: 0.4666\n",
      "Probability of pixel 433: 0.4577\n",
      "Probability of pixel 434: 0.4695\n",
      "Probability of pixel 435: 0.4569\n",
      "Probability of pixel 436: 0.4484\n",
      "Probability of pixel 437: 0.4378\n",
      "Probability of pixel 438: 0.4549\n",
      "Probability of pixel 439: 0.4594\n",
      "Probability of pixel 440: 0.4575\n",
      "Probability of pixel 441: 0.4619\n",
      "Probability of pixel 442: 0.4525\n",
      "Probability of pixel 443: 0.4606\n",
      "Probability of pixel 444: 0.4481\n",
      "Probability of pixel 445: 0.4499\n",
      "Probability of pixel 446: 0.4496\n",
      "Probability of pixel 447: 0.4459\n",
      "Probability of pixel 448: 0.4429\n",
      "Probability of pixel 449: 0.4465\n",
      "Probability of pixel 450: 0.4439\n",
      "Probability of pixel 451: 0.4467\n",
      "Probability of pixel 452: 0.4427\n",
      "Probability of pixel 453: 0.4429\n",
      "Probability of pixel 454: 0.4447\n",
      "Probability of pixel 455: 0.4500\n",
      "Probability of pixel 456: 0.4505\n",
      "Probability of pixel 457: 0.4733\n",
      "Probability of pixel 458: 0.4835\n",
      "Probability of pixel 459: 0.4909\n",
      "Probability of pixel 460: 0.4813\n",
      "Probability of pixel 461: 0.4815\n",
      "Probability of pixel 462: 0.4734\n",
      "Probability of pixel 463: 0.4625\n",
      "Probability of pixel 464: 0.4717\n",
      "Probability of pixel 465: 0.4784\n",
      "Probability of pixel 466: 0.5046\n",
      "Probability of pixel 467: 0.5122\n",
      "Probability of pixel 468: 0.5447\n",
      "Probability of pixel 469: 0.5489\n",
      "Probability of pixel 470: 0.5429\n",
      "Probability of pixel 471: 0.5507\n",
      "Probability of pixel 472: 0.5405\n",
      "Probability of pixel 473: 0.5416\n",
      "Probability of pixel 474: 0.5366\n",
      "Probability of pixel 475: 0.5370\n",
      "Probability of pixel 476: 0.5323\n",
      "Probability of pixel 477: 0.5377\n",
      "Probability of pixel 478: 0.5337\n",
      "Probability of pixel 479: 0.5375\n",
      "Probability of pixel 480: 0.5415\n",
      "Probability of pixel 481: 0.5497\n",
      "Probability of pixel 482: 0.5474\n",
      "Probability of pixel 483: 0.5510\n",
      "Probability of pixel 484: 0.5709\n",
      "Probability of pixel 485: 0.5454\n",
      "Probability of pixel 486: 0.5573\n",
      "Probability of pixel 487: 0.5421\n",
      "Probability of pixel 488: 0.5310\n",
      "Probability of pixel 489: 0.5309\n",
      "Probability of pixel 490: 0.5068\n",
      "Probability of pixel 491: 0.5307\n",
      "Probability of pixel 492: 0.5635\n",
      "Probability of pixel 493: 0.5662\n",
      "Probability of pixel 494: 0.5654\n",
      "Probability of pixel 495: 0.5635\n",
      "Probability of pixel 496: 0.5726\n",
      "Probability of pixel 497: 0.5823\n",
      "Probability of pixel 498: 0.5887\n",
      "Probability of pixel 499: 0.5911\n",
      "Probability of pixel 500: 0.5905\n",
      "Probability of pixel 501: 0.5832\n",
      "Probability of pixel 502: 0.5748\n",
      "Probability of pixel 503: 0.5848\n",
      "Probability of pixel 504: 0.5922\n",
      "Probability of pixel 505: 0.5985\n",
      "Probability of pixel 506: 0.6046\n",
      "Probability of pixel 507: 0.6103\n",
      "Probability of pixel 508: 0.6182\n",
      "Probability of pixel 509: 0.6093\n",
      "Probability of pixel 510: 0.6097\n",
      "Probability of pixel 511: 0.6153\n",
      "Probability of pixel 512: 0.6211\n",
      "Probability of pixel 513: 0.6493\n",
      "Probability of pixel 514: 0.6606\n",
      "Probability of pixel 515: 0.6633\n",
      "Probability of pixel 516: 0.6327\n",
      "Probability of pixel 517: 0.6576\n",
      "Probability of pixel 518: 0.6845\n",
      "Probability of pixel 519: 0.6615\n",
      "Probability of pixel 520: 0.6802\n",
      "Probability of pixel 521: 0.7361\n",
      "Probability of pixel 522: 0.7370\n",
      "Probability of pixel 523: 0.7456\n",
      "Probability of pixel 524: 0.7286\n",
      "Probability of pixel 525: 0.7350\n",
      "Probability of pixel 526: 0.7382\n",
      "Probability of pixel 527: 0.7369\n",
      "Probability of pixel 528: 0.7291\n",
      "Probability of pixel 529: 0.7219\n",
      "Probability of pixel 530: 0.7291\n",
      "Probability of pixel 531: 0.7214\n",
      "Probability of pixel 532: 0.7140\n",
      "Probability of pixel 533: 0.7069\n",
      "Probability of pixel 534: 0.7141\n",
      "Probability of pixel 535: 0.7081\n",
      "Probability of pixel 536: 0.7174\n",
      "Probability of pixel 537: 0.7191\n",
      "Probability of pixel 538: 0.7134\n",
      "Probability of pixel 539: 0.7181\n",
      "Probability of pixel 540: 0.7145\n",
      "Probability of pixel 541: 0.7203\n",
      "Probability of pixel 542: 0.7123\n",
      "Probability of pixel 543: 0.6713\n",
      "Probability of pixel 544: 0.6457\n",
      "Probability of pixel 545: 0.6341\n",
      "Probability of pixel 546: 0.6064\n",
      "Probability of pixel 547: 0.5789\n",
      "Probability of pixel 548: 0.5640\n",
      "Probability of pixel 549: 0.5901\n",
      "Probability of pixel 550: 0.6044\n",
      "Probability of pixel 551: 0.6040\n",
      "Probability of pixel 552: 0.6041\n",
      "Probability of pixel 553: 0.6162\n",
      "Probability of pixel 554: 0.6142\n",
      "Probability of pixel 555: 0.6175\n",
      "Probability of pixel 556: 0.6104\n",
      "Probability of pixel 557: 0.6213\n",
      "Probability of pixel 558: 0.6163\n",
      "Probability of pixel 559: 0.6209\n",
      "Probability of pixel 560: 0.6262\n",
      "Probability of pixel 561: 0.6317\n",
      "Probability of pixel 562: 0.6267\n",
      "Probability of pixel 563: 0.6213\n",
      "Probability of pixel 564: 0.6193\n",
      "Probability of pixel 565: 0.6173\n",
      "Probability of pixel 566: 0.6170\n",
      "Probability of pixel 567: 0.6061\n",
      "Probability of pixel 568: 0.6223\n",
      "Probability of pixel 569: 0.6341\n",
      "Probability of pixel 570: 0.6604\n",
      "Probability of pixel 571: 0.6949\n",
      "Probability of pixel 572: 0.7180\n",
      "Probability of pixel 573: 0.7294\n",
      "Probability of pixel 574: 0.7137\n",
      "Probability of pixel 575: 0.7368\n",
      "Probability of pixel 576: 0.7308\n",
      "Probability of pixel 577: 0.7200\n",
      "Probability of pixel 578: 0.7431\n",
      "Probability of pixel 579: 0.7513\n",
      "Probability of pixel 580: 0.7488\n",
      "Probability of pixel 581: 0.7482\n",
      "Probability of pixel 582: 0.7468\n",
      "Probability of pixel 583: 0.7424\n",
      "Probability of pixel 584: 0.7356\n",
      "Probability of pixel 585: 0.7276\n",
      "Probability of pixel 586: 0.7199\n",
      "Probability of pixel 587: 0.7130\n",
      "Probability of pixel 588: 0.7062\n",
      "Probability of pixel 589: 0.6997\n",
      "Probability of pixel 590: 0.6937\n",
      "Probability of pixel 591: 0.6997\n",
      "Probability of pixel 592: 0.6964\n",
      "Probability of pixel 593: 0.6920\n",
      "Probability of pixel 594: 0.6958\n",
      "Probability of pixel 595: 0.6734\n",
      "Probability of pixel 596: 0.6513\n",
      "Probability of pixel 597: 0.6461\n",
      "Probability of pixel 598: 0.6409\n",
      "Probability of pixel 599: 0.6818\n",
      "Probability of pixel 600: 0.6371\n",
      "Probability of pixel 601: 0.6390\n",
      "Probability of pixel 602: 0.6228\n",
      "Probability of pixel 603: 0.6102\n",
      "Probability of pixel 604: 0.6304\n",
      "Probability of pixel 605: 0.6336\n",
      "Probability of pixel 606: 0.6383\n",
      "Probability of pixel 607: 0.6319\n",
      "Probability of pixel 608: 0.6390\n",
      "Probability of pixel 609: 0.6428\n",
      "Probability of pixel 610: 0.6374\n",
      "Probability of pixel 611: 0.6295\n",
      "Probability of pixel 612: 0.6236\n",
      "Probability of pixel 613: 0.6262\n",
      "Probability of pixel 614: 0.6389\n",
      "Probability of pixel 615: 0.6332\n",
      "Probability of pixel 616: 0.6275\n",
      "Probability of pixel 617: 0.6221\n",
      "Probability of pixel 618: 0.6171\n",
      "Probability of pixel 619: 0.6130\n",
      "Probability of pixel 620: 0.6091\n",
      "Probability of pixel 621: 0.6088\n",
      "Probability of pixel 622: 0.6021\n",
      "Probability of pixel 623: 0.5861\n",
      "Probability of pixel 624: 0.5765\n",
      "Probability of pixel 625: 0.5828\n",
      "Probability of pixel 626: 0.5673\n",
      "Probability of pixel 627: 0.5664\n",
      "Probability of pixel 628: 0.5743\n",
      "Probability of pixel 629: 0.5841\n",
      "Probability of pixel 630: 0.5796\n",
      "Probability of pixel 631: 0.5876\n",
      "Probability of pixel 632: 0.5772\n",
      "Probability of pixel 633: 0.5857\n",
      "Probability of pixel 634: 0.5885\n",
      "Probability of pixel 635: 0.5933\n",
      "Probability of pixel 636: 0.5745\n",
      "Probability of pixel 637: 0.5770\n",
      "Probability of pixel 638: 0.5779\n",
      "Probability of pixel 639: 0.5783\n",
      "Probability of pixel 640: 0.5765\n",
      "Probability of pixel 641: 0.5729\n",
      "Probability of pixel 642: 0.5798\n",
      "Probability of pixel 643: 0.5747\n",
      "Probability of pixel 644: 0.5698\n",
      "Probability of pixel 645: 0.5748\n",
      "Probability of pixel 646: 0.5702\n",
      "Probability of pixel 647: 0.5663\n",
      "Probability of pixel 648: 0.5633\n",
      "Probability of pixel 649: 0.5585\n",
      "Probability of pixel 650: 0.5629\n",
      "Probability of pixel 651: 0.5716\n",
      "Probability of pixel 652: 0.5753\n",
      "Probability of pixel 653: 0.5843\n",
      "Probability of pixel 654: 0.5830\n",
      "Probability of pixel 655: 0.5888\n",
      "Probability of pixel 656: 0.5943\n",
      "Probability of pixel 657: 0.5706\n",
      "Probability of pixel 658: 0.5782\n",
      "Probability of pixel 659: 0.5734\n",
      "Probability of pixel 660: 0.5726\n",
      "Probability of pixel 661: 0.5823\n",
      "Probability of pixel 662: 0.5775\n",
      "Probability of pixel 663: 0.5898\n",
      "Probability of pixel 664: 0.5730\n",
      "Probability of pixel 665: 0.5768\n",
      "Probability of pixel 666: 0.5787\n",
      "Probability of pixel 667: 0.5730\n",
      "Probability of pixel 668: 0.5680\n",
      "Probability of pixel 669: 0.5604\n",
      "Probability of pixel 670: 0.5549\n",
      "Probability of pixel 671: 0.5493\n",
      "Probability of pixel 672: 0.5443\n",
      "Probability of pixel 673: 0.5495\n",
      "Probability of pixel 674: 0.5545\n",
      "Probability of pixel 675: 0.5501\n",
      "Probability of pixel 676: 0.5455\n",
      "Probability of pixel 677: 0.5495\n",
      "Probability of pixel 678: 0.5419\n",
      "Probability of pixel 679: 0.5223\n",
      "Probability of pixel 680: 0.5445\n",
      "Probability of pixel 681: 0.5690\n",
      "Probability of pixel 682: 0.5829\n",
      "Probability of pixel 683: 0.5708\n",
      "Probability of pixel 684: 0.5918\n",
      "Probability of pixel 685: 0.5907\n",
      "Probability of pixel 686: 0.6103\n",
      "Probability of pixel 687: 0.6021\n",
      "Probability of pixel 688: 0.5941\n",
      "Probability of pixel 689: 0.5903\n",
      "Probability of pixel 690: 0.5882\n",
      "Probability of pixel 691: 0.5840\n",
      "Probability of pixel 692: 0.5754\n",
      "Probability of pixel 693: 0.5896\n",
      "Probability of pixel 694: 0.5814\n",
      "Probability of pixel 695: 0.5896\n",
      "Probability of pixel 696: 0.5786\n",
      "Probability of pixel 697: 0.5890\n",
      "Probability of pixel 698: 0.5787\n",
      "Probability of pixel 699: 0.5891\n",
      "Probability of pixel 700: 0.5793\n",
      "Probability of pixel 701: 0.5699\n",
      "Probability of pixel 702: 0.5608\n",
      "Probability of pixel 703: 0.5521\n",
      "Probability of pixel 704: 0.5439\n",
      "Probability of pixel 705: 0.5300\n",
      "Probability of pixel 706: 0.5131\n",
      "Probability of pixel 707: 0.4968\n",
      "Probability of pixel 708: 0.4791\n",
      "Probability of pixel 709: 0.4686\n",
      "Probability of pixel 710: 0.4768\n",
      "Probability of pixel 711: 0.4590\n",
      "Probability of pixel 712: 0.4473\n",
      "Probability of pixel 713: 0.4390\n",
      "Probability of pixel 714: 0.4538\n",
      "Probability of pixel 715: 0.4466\n",
      "Probability of pixel 716: 0.4389\n",
      "Probability of pixel 717: 0.4519\n",
      "Probability of pixel 718: 0.4569\n",
      "Probability of pixel 719: 0.4561\n",
      "Probability of pixel 720: 0.4563\n",
      "Probability of pixel 721: 0.4547\n",
      "Probability of pixel 722: 0.4504\n",
      "Probability of pixel 723: 0.4451\n",
      "Probability of pixel 724: 0.4500\n",
      "Probability of pixel 725: 0.4441\n",
      "Probability of pixel 726: 0.4507\n",
      "Probability of pixel 727: 0.4456\n",
      "Probability of pixel 728: 0.4406\n",
      "Probability of pixel 729: 0.4358\n",
      "Probability of pixel 730: 0.4407\n",
      "Probability of pixel 731: 0.4455\n",
      "Probability of pixel 732: 0.4503\n",
      "Probability of pixel 733: 0.4436\n",
      "Probability of pixel 734: 0.4485\n",
      "Probability of pixel 735: 0.4415\n",
      "Probability of pixel 736: 0.4365\n",
      "Probability of pixel 737: 0.4343\n",
      "Probability of pixel 738: 0.4314\n",
      "Probability of pixel 739: 0.4316\n",
      "Probability of pixel 740: 0.4292\n",
      "Probability of pixel 741: 0.4287\n",
      "Probability of pixel 742: 0.4318\n",
      "Probability of pixel 743: 0.4273\n",
      "Probability of pixel 744: 0.4246\n",
      "Probability of pixel 745: 0.4298\n",
      "Probability of pixel 746: 0.4299\n",
      "Probability of pixel 747: 0.4293\n",
      "Probability of pixel 748: 0.4286\n",
      "Probability of pixel 749: 0.4264\n",
      "Probability of pixel 750: 0.4244\n",
      "Probability of pixel 751: 0.4260\n",
      "Probability of pixel 752: 0.4233\n",
      "Probability of pixel 753: 0.4204\n",
      "Probability of pixel 754: 0.4177\n",
      "Probability of pixel 755: 0.4205\n",
      "Probability of pixel 756: 0.4178\n",
      "Probability of pixel 757: 0.4205\n",
      "Probability of pixel 758: 0.4180\n",
      "Probability of pixel 759: 0.4155\n",
      "Probability of pixel 760: 0.4180\n",
      "Probability of pixel 761: 0.4205\n",
      "Probability of pixel 762: 0.4182\n",
      "Probability of pixel 763: 0.4205\n",
      "Probability of pixel 764: 0.4183\n",
      "Probability of pixel 765: 0.4206\n",
      "Probability of pixel 766: 0.4186\n",
      "Probability of pixel 767: 0.4170\n",
      "Probability of pixel 768: 0.4185\n",
      "Probability of pixel 769: 0.4204\n",
      "Probability of pixel 770: 0.4222\n",
      "Probability of pixel 771: 0.4240\n",
      "Probability of pixel 772: 0.4250\n",
      "Probability of pixel 773: 0.4267\n",
      "Probability of pixel 774: 0.4289\n",
      "Probability of pixel 775: 0.4275\n",
      "Probability of pixel 776: 0.4289\n",
      "Probability of pixel 777: 0.4302\n",
      "Probability of pixel 778: 0.4288\n",
      "Probability of pixel 779: 0.4302\n",
      "Probability of pixel 780: 0.4317\n",
      "Probability of pixel 781: 0.4331\n",
      "Probability of pixel 782: 0.4316\n",
      "Probability of pixel 783: 0.4332\n",
      "Probability of pixel 784: 0.4317\n"
     ]
    }
   ],
   "source": [
    "# Generate\n",
    "new_image = []\n",
    "\n",
    "do_left_env = True\n",
    "do_right_env = True\n",
    "do_right_node = True\n",
    "\n",
    "output = (mps_lst[0].output_node @ v1_class) % \\\n",
    "            (mps_lst[1].output_node @ v2_class)\n",
    "\n",
    "i = 0\n",
    "while i < len(nodes_mps_lst[0]):  \n",
    "    if i == 0:\n",
    "        new_probability = (nodes_mps_lst[0][i] @ v1) % \\\n",
    "                                (nodes_mps_lst[1][i] @ v2)\n",
    "    elif 'output' in nodes_mps_lst[0][i].name:\n",
    "        fixed_probability @= output\n",
    "        i += 1\n",
    "        continue\n",
    "    else:\n",
    "        nodes_mps_lst[0][i]['input'].disconnect()\n",
    "        nodes_mps_lst[0][i]['input'] ^ v1['feature']\n",
    "        nodes_mps_lst[1][i]['input'] ^ v2['feature']\n",
    "        \n",
    "        new_probability = fixed_probability @ ((nodes_mps_lst[0][i] @ v1) % \\\n",
    "                                                (nodes_mps_lst[1][i] @ v2))\n",
    "    \n",
    "    left_result_lst = []\n",
    "    right_result_lst = []\n",
    "    \n",
    "    # left env\n",
    "    if do_left_env:\n",
    "        stack1 = tk.stack(nodes_mps_lst[0][(i + 1):(len(mps_lst[0].left_env) + 1)])\n",
    "        stack2 = tk.stack(nodes_mps_lst[1][(i + 1):(len(mps_lst[1].left_env) + 1)])\n",
    "        stack1['input'] ^ stack2['input']\n",
    "        stack_result = stack1 @ stack2\n",
    "        left_result_lst += tk.unbind(stack_result)\n",
    "    \n",
    "    # right env\n",
    "    if do_right_env:\n",
    "        j = max((len(mps_lst[0].left_env) + 2), i + 1)\n",
    "        stack1 = tk.stack(nodes_mps_lst[0][j:-1])\n",
    "        stack2 = tk.stack(nodes_mps_lst[1][j:-1])\n",
    "        stack1['input'] ^ stack2['input']\n",
    "        stack_result = stack1 @ stack2\n",
    "        right_result_lst += tk.unbind(stack_result)\n",
    "    \n",
    "    # right node\n",
    "    if do_right_node:\n",
    "        right_result_lst.append(nodes_mps_lst[0][-1] @ nodes_mps_lst[1][-1])\n",
    "    \n",
    "    # Contract matrices\n",
    "    result = new_probability\n",
    "    \n",
    "    if do_left_env:\n",
    "        for node in left_result_lst:\n",
    "            result @= node\n",
    "            \n",
    "        if i == len(mps_lst[0].left_env) - 1:\n",
    "            do_left_env = False\n",
    "          \n",
    "    if i <= len(mps_lst[0].left_env):\n",
    "        result @= output\n",
    "            \n",
    "    if do_right_env or do_right_node:\n",
    "        for node in right_result_lst:\n",
    "            result @= node\n",
    "            \n",
    "        if i == len(nodes_mps_lst[0]) - 3:\n",
    "            do_right_env = False\n",
    "            \n",
    "        if i == len(nodes_mps_lst[0]) - 2:\n",
    "            do_right_node = False\n",
    "    \n",
    "    # print('Result:', result.tensor.item())\n",
    "    \n",
    "    prob = result.tensor / norm**2\n",
    "    print(f'Probability of pixel {i}: {prob.item():.4f}')\n",
    "    \n",
    "    if torch.rand(1).item() > prob.item():\n",
    "        v1_copy = v1.copy()\n",
    "        v1_copy['feature'].disconnect()\n",
    "        v1_copy.tensor = torch.tensor([1., -1.]).to(device)\n",
    "        \n",
    "        v2_copy = v2.copy()\n",
    "        v2_copy['feature'].disconnect()\n",
    "        v2_copy.tensor = torch.tensor([1., -1.]).to(device)\n",
    "        \n",
    "        nodes_mps_lst[0][i]['input'].disconnect()\n",
    "        nodes_mps_lst[1][i]['input'].disconnect()\n",
    "        nodes_mps_lst[0][i]['input'] ^ v1_copy['feature']\n",
    "        nodes_mps_lst[1][i]['input'] ^ v2_copy['feature']\n",
    "        \n",
    "        new_image.append(0.)\n",
    "        \n",
    "    else:\n",
    "        v1_copy = v1.copy()\n",
    "        v1_copy['feature'].disconnect()\n",
    "        \n",
    "        v2_copy = v2.copy()\n",
    "        v2_copy['feature'].disconnect()\n",
    "        \n",
    "        nodes_mps_lst[0][i]['input'].disconnect()\n",
    "        nodes_mps_lst[1][i]['input'].disconnect()\n",
    "        nodes_mps_lst[0][i]['input'] ^ v1_copy['feature']\n",
    "        nodes_mps_lst[1][i]['input'] ^ v2_copy['feature']\n",
    "        \n",
    "        new_image.append(1.)\n",
    "        \n",
    "    if i == 0:\n",
    "        fixed_probability = (nodes_mps_lst[0][i] @ v1_copy) % \\\n",
    "                                (nodes_mps_lst[1][i] @ v2_copy)\n",
    "    else:\n",
    "        fixed_probability @= (nodes_mps_lst[0][i] @ v1_copy) % \\\n",
    "                                (nodes_mps_lst[1][i] @ v2_copy)\n",
    "        \n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "image = torch.tensor(new_image).view(28, 28)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fba0c5d6940>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Class 0\n",
    "plt.imshow(image, cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fba0c3019a0>"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Class 1\n",
    "plt.imshow(image, cmap='gray')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pytorch",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "98819ef66e0fd8e26166ef23b2736d781c80dc7aa950207c762e497c21afbd1c"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
