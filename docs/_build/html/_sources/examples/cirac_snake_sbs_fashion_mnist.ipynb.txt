{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SnakeSBS - FashionMNIST\n",
    "\n",
    "Based on this [paper](https://arxiv.org/abs/1806.05964)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "from functools import partial\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torchvision import transforms, datasets\n",
    "\n",
    "import tensorkrowch as tk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SnakeSBS(nn.Module):\n",
    "    \n",
    "    def __init__(self, in_channels, d_bond, image_size):\n",
    "        super().__init__()\n",
    "        \n",
    "        # image = batch_size x in_channels x 28 x 28\n",
    "        self.mps1 = tk.ConvMPSLayer(in_channels=in_channels,\n",
    "                                    d_bond=d_bond,\n",
    "                                    out_channels=10,\n",
    "                                    kernel_size=image_size)\n",
    "        \n",
    "        self.mps2 = tk.ConvMPSLayer(in_channels=in_channels,\n",
    "                                    d_bond=d_bond,\n",
    "                                    out_channels=10,\n",
    "                                    kernel_size=image_size)\n",
    "        \n",
    "        self.mps3 = tk.ConvMPSLayer(in_channels=in_channels,\n",
    "                                    d_bond=d_bond,\n",
    "                                    out_channels=10,\n",
    "                                    kernel_size=image_size)\n",
    "        \n",
    "        self.mps4 = tk.ConvMPSLayer(in_channels=in_channels,\n",
    "                                    d_bond=d_bond,\n",
    "                                    out_channels=10,\n",
    "                                    kernel_size=image_size)\n",
    "        \n",
    "        self.softmax = nn.Softmax(dim=1)\n",
    "        self.layers = [self.mps1, self.mps2, self.mps3, self.mps4]\n",
    "        \n",
    "    def forward(self, x):\n",
    "        y1 = self.mps1(x, mode='snake')\n",
    "        y2 = self.mps2(x.transpose(2, 3), mode='snake')\n",
    "        y3 = self.mps2(x.flip(2), mode='snake')\n",
    "        y4 = self.mps2(x.transpose(2, 3).flip(2), mode='snake')\n",
    "        y = y1 * y2 * y3 * y4\n",
    "        y = y.view(-1, 10)\n",
    "        return y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Miscellaneous initialization\n",
    "torch.manual_seed(0)\n",
    "\n",
    "# Training parameters\n",
    "num_train = 60000\n",
    "num_test = 10000\n",
    "batch_size = 500\n",
    "image_size = (28, 28)\n",
    "num_epochs = 50\n",
    "num_epochs_canonical = 3\n",
    "learn_rate = 1e-4\n",
    "l2_reg = 0.0\n",
    "d_phys = 2\n",
    "d_bond = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "snake = SnakeSBS(d_phys, d_bond, image_size)\n",
    "snake = snake.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Before starting training, set memory modes to True, and trace\n",
    "for mps in snake.layers:\n",
    "    mps.automemory = True\n",
    "    mps.auto_unbind = False\n",
    "    mps.trace(torch.zeros(1, d_phys, image_size[0], image_size[1]).to(device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set our loss function and optimizer\n",
    "loss_fun = torch.nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.Adam(snake.parameters(),\n",
    "                             lr=learn_rate,\n",
    "                             weight_decay=l2_reg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def embedding(image: torch.Tensor) -> torch.Tensor:\n",
    "    return torch.stack([torch.ones_like(image), image, 1 - image], dim=1)\n",
    "\n",
    "transform = transforms.Compose([transforms.Resize(image_size),\n",
    "                                transforms.ToTensor(),\n",
    "                                transforms.Lambda(partial(tk.add_ones, dim=1))])  # partial(tk.add_ones, dim=1)\n",
    "\n",
    "train_set = datasets.FashionMNIST('./data', download=True, transform=transform)\n",
    "test_set = datasets.FashionMNIST('./data', download=True, transform=transform,\n",
    "                                 train=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training on 60000 MNIST images \n",
      "(testing on 10000) for 50 epochs\n",
      "Using Adam w/ learning rate = 1.0e-04\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Put MNIST data into dataloaders\n",
    "samplers = {\n",
    "    \"train\": torch.utils.data.SubsetRandomSampler(range(num_train)),\n",
    "    \"test\": torch.utils.data.SubsetRandomSampler(range(num_test)),\n",
    "}\n",
    "loaders = {\n",
    "    name: torch.utils.data.DataLoader(\n",
    "        dataset, batch_size=batch_size, sampler=samplers[name], drop_last=True\n",
    "    )\n",
    "    for (name, dataset) in [(\"train\", train_set), (\"test\", test_set)]\n",
    "}\n",
    "num_batches = {\n",
    "    name: total_num // batch_size\n",
    "    for (name, total_num) in [(\"train\", num_train), (\"test\", num_test)]\n",
    "}\n",
    "\n",
    "print(\n",
    "    f\"Training on {num_train} MNIST images \\n\"\n",
    "    f\"(testing on {num_test}) for {num_epochs} epochs\"\n",
    ")\n",
    "print(f\"Using Adam w/ learning rate = {learn_rate:.1e}\")\n",
    "if l2_reg > 0:\n",
    "    print(f\" * L2 regularization = {l2_reg:.2e}\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "* Epoch 1: Train. Loss: 1.1136, Train. Acc.: 0.5694, Test Acc.: 0.7571\n",
      "* Epoch 2: Train. Loss: 0.5567, Train. Acc.: 0.7917, Test Acc.: 0.8063\n",
      "* Epoch 3: Train. Loss: 0.4782, Train. Acc.: 0.8233, Test Acc.: 0.8244\n",
      "* Epoch 4: Train. Loss: 0.4373, Train. Acc.: 0.8400, Test Acc.: 0.8260\n",
      "* Epoch 5: Train. Loss: 0.4154, Train. Acc.: 0.8466, Test Acc.: 0.8473\n",
      "* Epoch 6: Train. Loss: 0.3945, Train. Acc.: 0.8544, Test Acc.: 0.8496\n",
      "* Epoch 7: Train. Loss: 0.3722, Train. Acc.: 0.8636, Test Acc.: 0.8545\n",
      "* Epoch 8: Train. Loss: 0.3727, Train. Acc.: 0.8623, Test Acc.: 0.8444\n",
      "* Epoch 9: Train. Loss: 0.3544, Train. Acc.: 0.8692, Test Acc.: 0.8580\n",
      "* Epoch 10: Train. Loss: 0.3428, Train. Acc.: 0.8744, Test Acc.: 0.8598\n",
      "* Epoch 11: Train. Loss: 0.3375, Train. Acc.: 0.8759, Test Acc.: 0.8612\n",
      "* Epoch 12: Train. Loss: 0.3324, Train. Acc.: 0.8757, Test Acc.: 0.8567\n",
      "* Epoch 13: Train. Loss: 0.3287, Train. Acc.: 0.8778, Test Acc.: 0.8615\n",
      "* Epoch 14: Train. Loss: 0.3202, Train. Acc.: 0.8810, Test Acc.: 0.8643\n",
      "* Epoch 15: Train. Loss: 0.3127, Train. Acc.: 0.8833, Test Acc.: 0.8668\n",
      "* Epoch 16: Train. Loss: 0.3080, Train. Acc.: 0.8867, Test Acc.: 0.8708\n",
      "* Epoch 17: Train. Loss: 0.3051, Train. Acc.: 0.8866, Test Acc.: 0.8640\n",
      "* Epoch 18: Train. Loss: 0.2992, Train. Acc.: 0.8886, Test Acc.: 0.8725\n",
      "* Epoch 19: Train. Loss: 0.2948, Train. Acc.: 0.8906, Test Acc.: 0.8683\n",
      "* Epoch 20: Train. Loss: 0.2905, Train. Acc.: 0.8905, Test Acc.: 0.8698\n",
      "* Epoch 21: Train. Loss: 0.2878, Train. Acc.: 0.8920, Test Acc.: 0.8819\n",
      "* Epoch 22: Train. Loss: 0.2813, Train. Acc.: 0.8949, Test Acc.: 0.8805\n",
      "* Epoch 23: Train. Loss: 0.2822, Train. Acc.: 0.8941, Test Acc.: 0.8745\n",
      "* Epoch 24: Train. Loss: 0.2744, Train. Acc.: 0.8966, Test Acc.: 0.8790\n",
      "* Epoch 25: Train. Loss: 0.2696, Train. Acc.: 0.8988, Test Acc.: 0.8735\n",
      "* Epoch 26: Train. Loss: 0.2709, Train. Acc.: 0.8987, Test Acc.: 0.8779\n",
      "* Epoch 27: Train. Loss: 0.2665, Train. Acc.: 0.8995, Test Acc.: 0.8736\n",
      "* Epoch 28: Train. Loss: 0.2621, Train. Acc.: 0.9011, Test Acc.: 0.8735\n",
      "* Epoch 29: Train. Loss: 0.2641, Train. Acc.: 0.9007, Test Acc.: 0.8802\n",
      "* Epoch 30: Train. Loss: 0.2592, Train. Acc.: 0.9013, Test Acc.: 0.8771\n",
      "* Epoch 31: Train. Loss: 0.2488, Train. Acc.: 0.9059, Test Acc.: 0.8827\n",
      "* Epoch 32: Train. Loss: 0.2475, Train. Acc.: 0.9073, Test Acc.: 0.8816\n",
      "* Epoch 33: Train. Loss: 0.2456, Train. Acc.: 0.9060, Test Acc.: 0.8782\n",
      "* Epoch 34: Train. Loss: 0.2450, Train. Acc.: 0.9070, Test Acc.: 0.8817\n",
      "* Epoch 35: Train. Loss: 0.2466, Train. Acc.: 0.9071, Test Acc.: 0.8834\n",
      "* Epoch 36: Train. Loss: 0.2402, Train. Acc.: 0.9084, Test Acc.: 0.8834\n",
      "* Epoch 37: Train. Loss: 0.2381, Train. Acc.: 0.9113, Test Acc.: 0.8826\n",
      "* Epoch 38: Train. Loss: 0.2332, Train. Acc.: 0.9118, Test Acc.: 0.8810\n",
      "* Epoch 39: Train. Loss: 0.2389, Train. Acc.: 0.9089, Test Acc.: 0.8860\n",
      "* Epoch 40: Train. Loss: 0.2315, Train. Acc.: 0.9117, Test Acc.: 0.8864\n",
      "* Epoch 41: Train. Loss: 0.2278, Train. Acc.: 0.9135, Test Acc.: 0.8831\n",
      "* Epoch 42: Train. Loss: 0.2290, Train. Acc.: 0.9136, Test Acc.: 0.8860\n",
      "* Epoch 43: Train. Loss: 0.2303, Train. Acc.: 0.9129, Test Acc.: 0.8869\n",
      "* Epoch 44: Train. Loss: 0.2351, Train. Acc.: 0.9116, Test Acc.: 0.8872\n",
      "* Epoch 45: Train. Loss: 0.2232, Train. Acc.: 0.9144, Test Acc.: 0.8882\n",
      "* Epoch 46: Train. Loss: 0.2184, Train. Acc.: 0.9164, Test Acc.: 0.8909\n",
      "* Epoch 47: Train. Loss: 0.2184, Train. Acc.: 0.9177, Test Acc.: 0.8869\n",
      "* Epoch 48: Train. Loss: 0.2130, Train. Acc.: 0.9181, Test Acc.: 0.8854\n",
      "* Epoch 49: Train. Loss: 0.2149, Train. Acc.: 0.9183, Test Acc.: 0.8877\n",
      "* Epoch 50: Train. Loss: 0.2089, Train. Acc.: 0.9206, Test Acc.: 0.8905\n"
     ]
    }
   ],
   "source": [
    "for epoch_num in range(1, num_epochs + 1):\n",
    "    running_train_loss = 0.0\n",
    "    running_train_acc = 0.0\n",
    "    \n",
    "    for inputs, labels in loaders[\"train\"]:\n",
    "        inputs = inputs.view(\n",
    "            [batch_size, d_phys, image_size[0], image_size[1]])\n",
    "        labels = labels.data\n",
    "        inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "        scores = snake(inputs)\n",
    "        _, preds = torch.max(scores, 1)\n",
    "\n",
    "        # Compute the loss and accuracy, add them to the running totals\n",
    "        loss = loss_fun(scores, labels)\n",
    "\n",
    "        with torch.no_grad():\n",
    "            accuracy = torch.sum(preds == labels).item() / batch_size\n",
    "            running_train_loss += loss\n",
    "            running_train_acc += accuracy\n",
    "\n",
    "        # Backpropagate and update parameters\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        running_test_acc = 0.0\n",
    "\n",
    "        for inputs, labels in loaders[\"test\"]:\n",
    "            inputs = inputs.view([\n",
    "                batch_size, d_phys, image_size[0], image_size[1]])\n",
    "            labels = labels.data\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "            # Call our MPS to get logit scores and predictions\n",
    "            scores = snake(inputs)\n",
    "            _, preds = torch.max(scores, 1)\n",
    "            running_test_acc += torch.sum(preds == labels).item() / batch_size\n",
    "    \n",
    "    print(f'* Epoch {epoch_num}: '\n",
    "          f'Train. Loss: {running_train_loss / num_batches[\"train\"]:.4f}, '\n",
    "          f'Train. Acc.: {running_train_acc / num_batches[\"train\"]:.4f}, '\n",
    "          f'Test Acc.: {running_test_acc / num_batches[\"test\"]:.4f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nº params:     157440\n",
      "Memory module: 0.6006 MB\n"
     ]
    }
   ],
   "source": [
    "# Original number of parametrs\n",
    "n_params = 0\n",
    "memory = 0\n",
    "for p in mps.parameters():\n",
    "    n_params += p.nelement()\n",
    "    memory += p.nelement() * p.element_size()  # Bytes\n",
    "print(f'Nº params:     {n_params}')\n",
    "print(f'Memory module: {memory / 1024**2:.4f} MB')  # MegaBytes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pytorch",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "98819ef66e0fd8e26166ef23b2736d781c80dc7aa950207c762e497c21afbd1c"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
