{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ConvTree - FashionMNIST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "from functools import partial\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torchvision import transforms, datasets\n",
    "\n",
    "import tensorkrowch as tk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ConvTree(nn.Module):\n",
    "    \n",
    "    def __init__(self, in_channels, out_dim1=10, out_dim2=3):\n",
    "        super().__init__()\n",
    "        \n",
    "        # image = batch_size x in_channels x 28 x 28\n",
    "        self.tree1 = tk.ConvTree(sites_per_layer=[1],\n",
    "                                 d_bond=[[in_channels] * 4 + [out_dim1]],\n",
    "                                 kernel_size=2,\n",
    "                                 stride=2)  # 14 x 14\n",
    "        \n",
    "        self.tree2 = tk.ConvTree(sites_per_layer=[1],\n",
    "                                 d_bond=[[out_dim1] * 4 + [out_dim2]],\n",
    "                                 kernel_size=2,\n",
    "                                 stride=2)  # 7 x 7\n",
    "        \n",
    "        self.tree3 = tk.Tree(sites_per_layer=[7, 1],\n",
    "                             d_bond=[[out_dim2] * 7 + [out_dim2],\n",
    "                                     [out_dim2] * 7 + [10]])\n",
    "        \n",
    "        self.layers = [self.tree1, self.tree2, self.tree3]\n",
    "        self.out_dim2 = out_dim2\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = self.tree1(x)\n",
    "        x = self.tree2(x)\n",
    "        x = x.view(-1, self.out_dim2, 49).permute(2, 0, 1)\n",
    "        x = self.tree3(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Miscellaneous initialization\n",
    "torch.manual_seed(0)\n",
    "\n",
    "# Training parameters\n",
    "num_train = 60000\n",
    "num_test = 10000\n",
    "batch_size = 500\n",
    "image_size = (28, 28)\n",
    "num_epochs = 200\n",
    "num_epochs_canonical = 3\n",
    "learn_rate = 1e-4\n",
    "l2_reg = 0.0\n",
    "d_phys = 2\n",
    "out_dim1 = 10\n",
    "out_dim2 = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "convtree = ConvTree(d_phys, out_dim1, out_dim2)\n",
    "convtree = convtree.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Before starting training, set memory modes to True, and trace\n",
    "convtree.tree1.auto_stack = True\n",
    "convtree.tree1.auto_unbind = False\n",
    "convtree.tree1.trace(torch.zeros(1, d_phys, image_size[0], image_size[1]).to(device))\n",
    "\n",
    "convtree.tree2.auto_stack = True\n",
    "convtree.tree2.auto_unbind = False\n",
    "convtree.tree2.trace(torch.zeros(1, out_dim1, 14, 14).to(device))\n",
    "\n",
    "convtree.tree3.auto_stack = True\n",
    "convtree.tree3.auto_unbind = False\n",
    "convtree.tree3.trace(torch.zeros(49, 1, out_dim2).to(device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set our loss function and optimizer\n",
    "loss_fun = torch.nn.CrossEntropyLoss()\n",
    "optimizer = torch.optim.Adam(convtree.parameters(),\n",
    "                             lr=learn_rate,\n",
    "                             weight_decay=l2_reg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def embedding(image: torch.Tensor) -> torch.Tensor:\n",
    "    return torch.stack([torch.ones_like(image), image, 1 - image], dim=1)\n",
    "\n",
    "transform = transforms.Compose([transforms.Resize(image_size),\n",
    "                                transforms.ToTensor(),\n",
    "                                transforms.Lambda(partial(tk.add_ones, dim=1))])  # partial(tk.add_ones, dim=1)\n",
    "\n",
    "train_set = datasets.FashionMNIST('./data', download=True, transform=transform)\n",
    "test_set = datasets.FashionMNIST('./data', download=True, transform=transform,\n",
    "                                 train=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training on 60000 MNIST images \n",
      "(testing on 10000) for 200 epochs\n",
      "Using Adam w/ learning rate = 1.0e-04\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Put MNIST data into dataloaders\n",
    "samplers = {\n",
    "    \"train\": torch.utils.data.SubsetRandomSampler(range(num_train)),\n",
    "    \"test\": torch.utils.data.SubsetRandomSampler(range(num_test)),\n",
    "}\n",
    "loaders = {\n",
    "    name: torch.utils.data.DataLoader(\n",
    "        dataset, batch_size=batch_size, sampler=samplers[name], drop_last=True\n",
    "    )\n",
    "    for (name, dataset) in [(\"train\", train_set), (\"test\", test_set)]\n",
    "}\n",
    "num_batches = {\n",
    "    name: total_num // batch_size\n",
    "    for (name, total_num) in [(\"train\", num_train), (\"test\", num_test)]\n",
    "}\n",
    "\n",
    "print(\n",
    "    f\"Training on {num_train} MNIST images \\n\"\n",
    "    f\"(testing on {num_test}) for {num_epochs} epochs\"\n",
    ")\n",
    "print(f\"Using Adam w/ learning rate = {learn_rate:.1e}\")\n",
    "if l2_reg > 0:\n",
    "    print(f\" * L2 regularization = {l2_reg:.2e}\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "* Epoch 10: Train. Loss: 0.9932, Train. Acc.: 0.6571, Test Acc.: 0.6619\n",
      "* Epoch 20: Train. Loss: 0.7386, Train. Acc.: 0.7325, Test Acc.: 0.7303\n",
      "* Epoch 30: Train. Loss: 0.5930, Train. Acc.: 0.7834, Test Acc.: 0.7798\n",
      "* Epoch 40: Train. Loss: 0.4989, Train. Acc.: 0.8188, Test Acc.: 0.8088\n",
      "* Epoch 50: Train. Loss: 0.4541, Train. Acc.: 0.8357, Test Acc.: 0.8230\n",
      "* Epoch 60: Train. Loss: 0.4263, Train. Acc.: 0.8454, Test Acc.: 0.8307\n",
      "* Epoch 70: Train. Loss: 0.4081, Train. Acc.: 0.8514, Test Acc.: 0.8378\n",
      "* Epoch 80: Train. Loss: 0.3949, Train. Acc.: 0.8546, Test Acc.: 0.8387\n",
      "* Epoch 90: Train. Loss: 0.3838, Train. Acc.: 0.8587, Test Acc.: 0.8416\n",
      "* Epoch 100: Train. Loss: 0.3764, Train. Acc.: 0.8612, Test Acc.: 0.8449\n",
      "* Epoch 110: Train. Loss: 0.3665, Train. Acc.: 0.8651, Test Acc.: 0.8464\n",
      "* Epoch 120: Train. Loss: 0.3577, Train. Acc.: 0.8671, Test Acc.: 0.8486\n",
      "* Epoch 130: Train. Loss: 0.3505, Train. Acc.: 0.8690, Test Acc.: 0.8504\n",
      "* Epoch 140: Train. Loss: 0.3437, Train. Acc.: 0.8715, Test Acc.: 0.8530\n",
      "* Epoch 150: Train. Loss: 0.3390, Train. Acc.: 0.8735, Test Acc.: 0.8535\n",
      "* Epoch 160: Train. Loss: 0.3320, Train. Acc.: 0.8755, Test Acc.: 0.8539\n",
      "* Epoch 170: Train. Loss: 0.3274, Train. Acc.: 0.8773, Test Acc.: 0.8569\n",
      "* Epoch 180: Train. Loss: 0.3194, Train. Acc.: 0.8799, Test Acc.: 0.8532\n",
      "* Epoch 190: Train. Loss: 0.3169, Train. Acc.: 0.8813, Test Acc.: 0.8554\n",
      "* Epoch 200: Train. Loss: 0.3100, Train. Acc.: 0.8835, Test Acc.: 0.8586\n"
     ]
    }
   ],
   "source": [
    "for epoch_num in range(1, num_epochs + 1):\n",
    "    running_train_loss = 0.0\n",
    "    running_train_acc = 0.0\n",
    "    \n",
    "    for inputs, labels in loaders[\"train\"]:\n",
    "        inputs = inputs.view(\n",
    "            [batch_size, d_phys, image_size[0], image_size[1]])\n",
    "        labels = labels.data\n",
    "        inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "        scores = convtree(inputs)\n",
    "        _, preds = torch.max(scores, 1)\n",
    "\n",
    "        # Compute the loss and accuracy, add them to the running totals\n",
    "        loss = loss_fun(scores, labels)\n",
    "\n",
    "        with torch.no_grad():\n",
    "            accuracy = torch.sum(preds == labels).item() / batch_size\n",
    "            running_train_loss += loss\n",
    "            running_train_acc += accuracy\n",
    "\n",
    "        # Backpropagate and update parameters\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        running_test_acc = 0.0\n",
    "\n",
    "        for inputs, labels in loaders[\"test\"]:\n",
    "            inputs = inputs.view([\n",
    "                batch_size, d_phys, image_size[0], image_size[1]])\n",
    "            labels = labels.data\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "\n",
    "            # Call our MPS to get logit scores and predictions\n",
    "            scores = convtree(inputs)\n",
    "            _, preds = torch.max(scores, 1)\n",
    "            running_test_acc += torch.sum(preds == labels).item() / batch_size\n",
    "    \n",
    "    if epoch_num % 10 == 0:\n",
    "        print(f'* Epoch {epoch_num}: '\n",
    "            f'Train. Loss: {running_train_loss / num_batches[\"train\"]:.4f}, '\n",
    "            f'Train. Acc.: {running_train_acc / num_batches[\"train\"]:.4f}, '\n",
    "            f'Test Acc.: {running_test_acc / num_batches[\"test\"]:.4f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nº params:     97957\n",
      "Memory module: 0.3737 MB\n"
     ]
    }
   ],
   "source": [
    "# Original number of parametrs\n",
    "n_params = 0\n",
    "memory = 0\n",
    "for p in convtree.parameters():\n",
    "    n_params += p.nelement()\n",
    "    memory += p.nelement() * p.element_size()  # Bytes\n",
    "print(f'Nº params:     {n_params}')\n",
    "print(f'Memory module: {memory / 1024**2:.4f} MB')  # MegaBytes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pytorch",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "98819ef66e0fd8e26166ef23b2736d781c80dc7aa950207c762e497c21afbd1c"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
